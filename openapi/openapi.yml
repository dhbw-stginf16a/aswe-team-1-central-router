openapi: 3.0.0
info:
  description: alex central node API
  version: 0.0.1
  title: alex-central-node
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: GPLv2
    url: 'https://www.gnu.org/licenses/gpl-2.0.en.html'
servers:
  - url: /api/v1
    description: The APIs base path
tags:
  - name: preferences
    description: Preference related Endpoints
  - name: input
    description: Input from the chat adapter
  - name: skill
    description: Skill handling
  - name: monitoring
    description: Monitoring entity handling
  - name: proactive
    description: Proactive actions

paths:
  /request:
    post:
      tags:
        - input
      summary: Intent-input
      description: ''
      operationId: api.input.intentInput
      requestBody:
        description: User intent
        content:
          application/json:
            schema:
              required:
                - skill
                - type
                - payload
                - user_handle
                - input_service
              properties:
                skill:
                  type: string
                type:
                  type: string
                user_handle:
                  type: string
                input_service:
                  type: string
                payload:
                  type: object
      responses:
        '200':
          description: Success
  '/preferences/user/{userId}':
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          $ref: '#/components/schemas/userId'
        description: The id of the user
    get:
      tags:
        - preferences
      summary: Get user preferences
      description: ''
      operationId: api.preferences.getUserPreferences
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userPreferences'
    delete:
      tags:
        - preferences
      summary: Reset user preferences
      description: ''
      operationId: api.preferences.resetUserPreferences
      responses:
        '204':
          description: Success
    patch:
      tags:
        - preferences
      summary: Update some user-preferences
      description: ''
      operationId: api.preferences.patchUserPreferences
      requestBody:
        description: Preferences to update
        content:
          application/json:
            schema:
              type: object
      responses:
        '204':
          description: Success
  /preferences/global:
    get:
      tags:
        - preferences
      summary: Get global preferences
      description: ''
      operationId: api.preferences.getGlobalPreferences
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalPreferences'
    patch:
      tags:
        - preferences
      summary: Update some global-preferences
      description: ''
      operationId: api.preferences.patchGlobalPreferences
      responses:
        '204':
          description: Success
  /monitoring:
    post:
      tags:
        - monitoring
      summary: Registers a monitoring entity to the api
      description: ''
      operationId: api.monitor.registerMonitor
      requestBody:
        description: Monitoring entity description
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitor'
      responses:
        '204':
          description: Success
    get:
      tags:
        - monitoring
      summary: Get a list of registred monitoring entities
      description: ''
      operationId: api.monitor.getMonitor
      responses:
        '200':
          description: Array of monitoring entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitorList'
  '/monitoring/{concern}':
    parameters:
      - in: path
        name: concern
        required: true
        schema:
          $ref: '#/components/schemas/concern'
        description: The name of a concern
    post:
      tags:
        - monitoring
      summary: Get dynamic information from a monitoring entity (to be called from skill)
      description: ''
      operationId: api.monitor.dynamicPull
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitorRequestPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/monitorResponsePayload'

  '/monitoring/event/{concern}':
    parameters:
      - in: path
        name: concern
        required: true
        schema:
          $ref: '#/components/schemas/concern'
        description: The id of a concern
    post:
      tags:
        - monitoring
      summary: Push dynamic changes to the api (to be called from monitoring entity)
      description: ''
      operationId: api.monitor.handleEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitorResponsePayload'
      responses:
        '204':
          description: Success
  /skill:
    post:
      tags:
        - skill
      summary: Registers a skill to the api
      description: ''
      operationId: api.skill.registerSkill
      requestBody:
        description: SKill description
        content:
          application/json:
            schema:
              required:
                - name
                - endpoint
                - interests
              properties:
                name:
                  type: string
                  example: calendar
                endpoint:
                  type: string
                  example: 'https://calendarapi.service/api/v1'
                interests:
                  type: array
                  items:
                    type: string
                  example:
                    - "calendar"
                    - "public_transport"
      responses:
        '204':
          description: Success
    get:
      tags:
        - skill
      summary: Get a list of registred skills
      description: ''
      operationId: api.skill.getSkills
      responses:
        '200':
          description: Array of skill names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skillList'

  /proactive:
    post:
      tags:
        - skill
        - proactive
      summary: Get dynamic information from a monitoring entity (to be called from skill)
      description: ''
      operationId: api.skill.proactive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitorRequestPayload'
      responses:
        '204':
          description: Success

components:
  schemas:
    userId:
      type: string
      format: uuid
      example: 0693d37c-404a-423c-b802-424341ff087b
    userPreferences:
      type: object
      description: Object of key-value preferences. Paths nested using dots in keys.
    globalPreferences:
      type: object
      description: Object of key-value preferences. Paths nested using dots in keys.
    skillList:
      type: array
      items:
        type: string
        example: RouteCalculator
    monitorRequestPayload:
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: current_weather_request
        payload:
          type: object
          example:
            location: "Stuttgart"
    monitorResponsePayload:
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: current_weather_response
        payload:
          type: object
          example:
            locations:
              "Stuttgart":
                current: "sunny"
    monitorList:
      type: array
      items:
        type: string
        example: calendar
    concern:
      type: string
      format: weather
    monitor:
      required:
        - concern
        - endpoint
      properties:
        concern:
          type: string
          example: calendar
        endpoint:
          type: string
          example: 'https://calendarapi.service/api/v1'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
